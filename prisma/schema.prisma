generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  email         String? @unique
  name          String
  emailVerified Boolean
  image         String?
  phoneNumber   String?
  age           Int?
  city          String?
  gender        String?
  wallet        Float   @default(0.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions    Session[]
  accounts    Account[]
  Transaction Transaction[]
  Invoice     Invoice[]
  Goal        Goal[]

  @@map("users")
}

model Transaction {
  id              String          @id @default(uuid())
  user            User            @relation(fields: [userId], references: [id])
  userId          String
  amount          Float
  type            TransactionType
  category        String
  note            String?
  TransactionDate DateTime
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("transactions")
}

enum TransactionType {
  income
  expense
}

model Invoice {
  id            String        @id @default(uuid())
  draftName     String
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  totalAmount   Float
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  clientName    String
  clientEmail   String
  clientNumber  String
  status        InvoiceStatus
  paymentMethod PaymentMethod
  notes         String
  products      Product[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("invoices")
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  invoiceId  String
  Invoice    Invoice? @relation(fields: [invoiceId], references: [id])
}

enum InvoiceStatus {
  pending
  paid
  overdue
  cancelled
}

enum PaymentMethod {
  cash
  creditCard
  bankTransfer
  upi
  other
}

// Goals Schemas
model Goal {
  id              String            @id @default(uuid())
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  title           String
  note            String?
  targetAmount    Float
  currentAmount   Float             @default(0.0)
  completionDate  DateTime?
  status          GoalStatus        @default(active)
  category        String
  priority        PriorityLevel     @default(medium)
  image           String?
  reminder        Reminder
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  GoalTransaction GoalTransaction[]

  @@map("goals")
}

enum Reminder {
  daily
  every_3_days
  weekly
  biweekly
  monthly
}

model GoalTransaction {
  id        String   @id @default(uuid())
  goalId    String
  goal      Goal     @relation(fields: [goalId], references: [id])
  amount    Float
  createdAt DateTime @default(now())
  note      String?
}

enum GoalStatus {
  active
  completed
  canceled
}

enum PriorityLevel {
  low
  medium
  high
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
